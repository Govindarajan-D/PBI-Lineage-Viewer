; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define AppName "PBI Lineage Viewer"
#define AppVersion "0.1"
#define AppURL "https://github.com/Govindarajan-D/PBI-Lineage-Viewer"
#define AppExeName "Utils for PBI.exe"
#define PublishDir ".\"

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{855ECCEC-85C3-47C1-A378-A37DCA28C210}
AppName={#AppName}
AppVersion={#AppVersion}
;AppVerName={#AppName} {#AppVersion}
AppPublisherURL={#AppURL}
AppSupportURL={#AppURL}
AppUpdatesURL={#AppURL}
DefaultDirName={autopf}\{#AppName}
UninstallDisplayIcon={app}\{#AppExeName}
; "ArchitecturesAllowed=x64compatible" specifies that Setup cannot run
; on anything but x64 and Windows 11 on Arm.
ArchitecturesAllowed=x64compatible
; "ArchitecturesInstallIn64BitMode=x64compatible" requests that the
; install be done in "64-bit mode" on x64 or Windows 11 on Arm,
; meaning it should use the native 64-bit Program Files directory and
; the 64-bit view of the registry.
ArchitecturesInstallIn64BitMode=x64compatible
DisableProgramGroupPage=yes
; Remove the following line to run in administrative install mode (install for all users).
PrivilegesRequired=lowest
OutputBaseFilename=Setup-PBILineageViewer
SolidCompression=yes
WizardStyle=modern

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
Source: "{#PublishDir}\*"; DestDir: "{#PublishDir}\Output\"; Flags: ignoreversion

; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{autoprograms}\{#AppName}"; Filename: "{app}\{#AppExeName}"
Name: "{autodesktop}\{#AppName}"; Filename: "{app}\{#AppExeName}"; Tasks: desktopicon

[Run]
Filename: "{app}\{#AppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(AppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent

[Code]
// --- Function to check if the required .NET Desktop Runtime is installed ---
// This function is identical to the previous version and reliably checks the registry.
function IsDotNetDesktopRuntimeInstalled(MinVersion: string): Boolean;
var
  InstalledVersion: string;
  InstalledMajor, RequiredMajor: Integer;
  InstalledMinor, RequiredMinor: Integer;
  InstalledPatch, RequiredPatch: Integer;
begin
  Result := False;
  // Determine the correct registry key based on the architecture
  #if Defined(x64)
    Log('Checking for 64-bit .NET Desktop Runtime.');
    if RegQueryStringValue(HKEY_LOCAL_MACHINE_64, 'SOFTWARE\dotnet\Setup\InstalledVersions\x64\sharedhost\Version', '', InstalledVersion) then
  #else
    Log('Checking for 32-bit .NET Desktop Runtime.');
    if RegQueryStringValue(HKEY_LOCAL_MACHINE_32, 'SOFTWARE\dotnet\Setup\InstalledVersions\x86\sharedfx\Microsoft.WindowsDesktop.App', '', InstalledVersion) then
  #endif
  begin
    Log(Format('Found .NET Desktop Runtime version: %s', [InstalledVersion]));
    // Simple version comparison logic
    try
      RequiredMajor := StrToInt(Copy(MinVersion, 1, Pos('.', MinVersion) - 1));
      Delete(MinVersion, 1, Pos('.', MinVersion));
      RequiredMinor := StrToInt(Copy(MinVersion, 1, Pos('.', MinVersion) - 1));
      Delete(MinVersion, 1, Pos('.', MinVersion));
      RequiredPatch := StrToInt(MinVersion);

      InstalledMajor := StrToInt(Copy(InstalledVersion, 1, Pos('.', InstalledVersion) - 1));
      Delete(InstalledVersion, 1, Pos('.', InstalledVersion));
      InstalledMinor := StrToInt(Copy(InstalledVersion, 1, Pos('.', InstalledVersion) - 1));
      Delete(InstalledVersion, 1, Pos('.', InstalledVersion));
      InstalledPatch := StrToInt(InstalledVersion);

      if (InstalledMajor > RequiredMajor) or
         ((InstalledMajor = RequiredMajor) and (InstalledMinor > RequiredMinor)) or
         ((InstalledMajor = RequiredMajor) and (InstalledMinor = RequiredMinor) and (InstalledPatch >= RequiredPatch)) then
      begin
        Result := True;
      end;
    except
      Log('Error parsing .NET version numbers.');
    end;
  end else
  begin
    Log('.NET Desktop Runtime registry key not found.');
  end;
end;


// --- This function runs when the setup wizard is initializing ---
function InitializeSetup(): Boolean;
var
  ErrorCode: Integer;
  DotNetURL: string;
begin
  // --- CHECK FOR .NET ---
  // Specify your required minimum version here, e.g., '8.0.0'
  if IsDotNetDesktopRuntimeInstalled('8.0.0') then
  begin
    Log('.NET 8.0 or newer is installed. Proceeding with installation.');
    Result := True;
  end
  else
  begin
    Log('.NET 8.0 or newer is NOT installed.');
    // Inform the user and ask if they want to go to the download page.
    if MsgBox('This application requires the .NET 8 (or higher) Desktop Runtime.'#13#10#13#10'Do you want to open the official download page in your browser?', mbConfirmation, MB_YESNO) = IDYES then
    begin
      // The official download page for the .NET 8 Runtime
      DotNetURL := 'https://dotnet.microsoft.com/en-us/download/dotnet/8.0/runtime';
      Log('User chose to download. Opening URL: ' + DotNetURL);
      
      // Use ShellExec to open the URL in the user's default browser.
      // 'open' is the verb, ewNoWait means the installer doesn't wait for the browser to close.
      ShellExec('open', DotNetURL, '', '', SW_SHOWNORMAL, ewNoWait, ErrorCode);
    end
    else
    begin
      Log('User chose not to download .NET.');
    end;
    
    // Always abort the installation if .NET is not present.
    // The user must install it first and then re-run the setup.
    MsgBox('The .NET 8 (or higher) Desktop Runtime is required.'#13#10#13#10'Please install it from the download page, then run this installer again.', mbInformation, MB_OK);
    Result := False;
  end;
end;

